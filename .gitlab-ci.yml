image: python:3.11.3-alpine3.16

workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

variables:
  IMAGE_NAME: $CI_REGISTRY_IMAGE/python
  VERSION: .$CI_PIPELINE_IID
  DEV_URL: google.com
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

stages:
  - test
  - build
  - test_dependency
  - deploy

unit_test_run:
  stage: test
  image: python:3.11.3-alpine3.16
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - .cache/pip
  tags:
    - local
    - docker
    - linux
  variables:
    UNIT_TEST: unit_tests.py
    UNIT_TEST_RESULT: unittest_result.xml
  before_script:
    - cd python_app
    - pip install -r requirements.txt
  script:
    - python3 $UNIT_TEST > $UNIT_TEST_RESULT 2>&1
  artifacts:
    when: always
    reports:
      junit: python_app/$UNIT_TEST_RESULT

check_caching:
  stage: test
  needs:
    - unit_test_run
  cache:
    key: "$CI_COMMIT_REF_NAME"
    paths:
      - .cache/pip
    policy: pull
  tags:
    - local
    - docker
    - linux
  before_script:
    - cd python_app
    - pip install -r requirements.txt
  script:
    - python3 --version

sast:
  stage: test
  
build_app:
  stage: build
  only:
    - main
  tags:
    - aws
    - shell
    - remote
    - ubuntu
  before_script:
    - export PACKAGE_VERSION=$(cat version.json | jq -r .version)
    - export VERSION=$PACKAGE_VERSION.$CI_PIPELINE_IID
    - echo "VERSION=$VERSION" >> build.env
    - echo "MY_ENV=value" >> build.env
    - cd python_app
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $IMAGE_NAME:$VERSION .
    - docker push $IMAGE_NAME:$VERSION
  artifacts:
    reports:
      dotenv: build.env

versioning_builded_image:
  stage: build
  only:
    - main
  tags:
    - local
    - shell
  needs:
    - build_app
  before_script:
    - ls
    - env
  script:
    - echo "Making sure artifact and dotenv features are up and running"

check_dependency:
  only:
    - main
  stage: test_dependency
  tags:
    - local
    - shell
  dependencies: []
  before_script:
    - ls
    - env
  script:
    - echo "I have no env variables bcs of dependencies"


.deployment:
  only:
    - main
  tags:
    - shell
    - local
  needs:
    - build_app
  variables:
    # SSH_PRIVATE_KEY: ""
    SERVER_ADDRESS: ""
    COMPOSE_PROJECT_NAME: ""
    ENDPOINT: ""
    HOSTNAME: ""
  before_script:
    - ls
    - chmod 700 $SSH_PRIVATE_KEY
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ./docker-compose.yml ubuntu@$SERVER_ADDRESS:/home/ubuntu/
    - ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY ubuntu@$SERVER_ADDRESS "
        ls &&
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        
        export COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME &&
        export DC_IMAGE_NAME=$IMAGE_NAME &&
        export DC_IMAGE_TAG=$VERSION &&
        
        docker-compose down &&
        docker-compose up -d &&
        docker ps"
  environment:
    name: $HOSTNAME
    url: $URL

deploy_app_to_dev:
  extends: .deployment
  stage: deploy
  variables:
#    SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY
    SERVER_ADDRESS: $DEV_SERVER_ADDRESS
    COMPOSE_PROJECT_NAME: dev
    ENDPOINT: google.com
    HOSTNAME: dev


include:
  - template: Jobs/SAST.gitlab-ci.yml 
  

run_functional_tests:
  stage: deploy
  tags:
    - shell
    - local
  needs:
    - deploy_app_to_dev
  script:
    - echo "Running functional tests ..."

deploy_app_to_staging:
  extends: .deployment
  stage: deploy
  needs:
    - run_functional_tests
  variables:
#    SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY
    SERVER_ADDRESS: $STAGING_SERVER_ADDRESS
    COMPOSE_PROJECT_NAME: staging
    ENDPOINT: google.com
    HOSTNAME: staging

deploy_app_to_prod:
  extends: .deployment
  stage: deploy
  needs:
    - deploy_app_to_staging
  variables:
    # SSH_PRIVATE_KEY: $SSH_PRIVATE_KEY
    SERVER_ADDRESS: $PROD_SERVER_ADDRESS
    COMPOSE_PROJECT_NAME: prod
    ENDPOINT: google.com
    HOSTNAME: prod
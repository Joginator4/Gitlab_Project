workflow:
  rules:
    - if: $CI_COMMIT_BRANCH != "main" && $CI_PIPELINE_SOURCE != "merge_request_event"
      when: never
    - when: always

variables:
  #IMAGE_NAME: python
  IMAGE_NAME: $CI_REGISTRY_IMAGE/python
  VERSION: .$CI_PIPELINE_IID
  DEV_URL: google.com

stages:
  - test
  - build
  - deploy

unit_test_run:
  stage: test
  image: python:3.11.3-alpine3.16
  tags:
    - local
    - docker
    - linux
  variables:
    UNIT_TEST: unit_tests.py
    UNIT_TEST_RESULT: unittest_result.xml
  before_script:
    - echo "Preparing to run tests"
    - cd python_app
  script:
    - python3 $UNIT_TEST > $UNIT_TEST_RESULT 2>&1
  artifacts:
    when: always
    reports:
      junit: python_app/$UNIT_TEST_RESULT


build_app:
  stage: build
  only:
    - main
  tags:
    - local
    - shell
 # variables:
    #REPO: registry.gitlab.com/kacperblaz/kubernetes_training .
  before_script:
    - export PACKAGE_VERSION=$(cat version.json | jq -r .version)
    - export VERSION=$PACKAGE_VERSION.$CI_PIPELINE_IID
    - echo $VERSION > version.txt
    - cd python_app
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
#    - docker login -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
    - docker build -t $IMAGE_NAME:$VERSION .
    - docker push $IMAGE_NAME:$VERSION
  artifacts:
    paths:
      - version.txt

versioning_builded_image:
  stage: build
  only:
    - main
  tags:
    - local
    - shell
  needs:
    - build_app
  before_script:
    - ls
    - export VERSION=$(cat version.txt)
    - cat version.txt
  script:
    - echo "I have version.txt file inside this stage"

deploy_app:
  only:
    - main
  stage: deploy
  tags:
    - local
    - shell
  needs:
    - build_app
  before_script:
    - echo "Logging to dev-server on aws and deploying python app from CR"
    - chmod 700 $SSH_DEV_KEY
    - export VERSION=$(cat version-file.txt)
  script:
    - scp -o StrictHostKeyChecking=no -i $SSH_DEV_KEY docker-compose.yml ubuntu@$IP_ADDRESS:/home/ubuntu/
    - ssh -o StrictHostKeyChecking=no -i $SSH_DEV_KEY ubuntu@$IP_ADDRESS "
        ls &&
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        export DC_IMAGE_NAME=$IMAGE_NAME &&
        export DC_IMAGE_TAG=$VERSION &&
        docker-compose down &&
        docker-compose up -d &&
        docker ps"
  environment:
    name: google_platform
    url: $DEV_URL